@page "/Auditorias/{AuditoriaID:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager
@inject IMostrarMensajes mostrarMensajes


<div class="form-group">
    <div class="row">
        <div class="col-md-6">
            <label>Nro de Orden:</label>
            <div>
                <input readonly class="form-control" value="@Auditoria.NroOrden" />
            </div>
        </div>
        <div class="col-md-6">
            <label>Nro de Pieza:</label>
            <div>
                <input readonly class="form-control" value="@Auditoria.NroPieza" />
            </div>
        </div>
    </div>
</div>

<div class="form-group">
    <label>Areas:</label>
    <div>
        <input readonly class="form-control" value="@TextoArea" />
    </div>
</div>

<div class="form-group">
    <label>Procesos:</label>
    <div>
        <input readonly class="form-control" value="@TextoProceso" />
    </div>
</div>

<div class="form-group">
    <label>Maquinas:</label>
    <div>
        <input readonly class="form-control" value="@TextoMaquina" />
    </div>
</div>

<div class="form-group">
    <div class="row">
        <div class="col-sm-6">
            <label>Operario:</label>
            <div>
                <input readonly class="form-control" value="@TextoOperario" />
            </div>
        </div>
        <div class="col-sm-6">
            <label>Supervisores:</label>
            <div>
                <input readonly class="form-control" value="@TextoSupervisor" />
            </div>
        </div>
    </div>
</div>

@foreach (var detalleAuditoria in detallesAuditoria)
{
    <RespuestaPuntoAuditoria detalleAuditoria="detalleAuditoria"></RespuestaPuntoAuditoria>
}

@code {
    [Parameter] public int AuditoriaID { get; set; } = 0;

    private AuditoriaDTO Auditoria = new AuditoriaDTO();
    private List<DetalleAuditoria> detallesAuditoria = new List<DetalleAuditoria>();
    private string TextoArea = "", TextoProceso = "", TextoMaquina = "", TextoOperario = "", TextoSupervisor = "";

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<AuditoriaDTO>($"api/Auditorias/{AuditoriaID}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                var mensajeError = await responseHttp.GetBody();
                await mostrarMensajes.MostrarMensajeError(mensajeError);
            }
        }
        else
        {
            Auditoria = responseHttp.Response;
            TextoArea = Auditoria.Area.Descripcion;
            TextoProceso = Auditoria.Proceso.Descripcion;
            TextoMaquina = Auditoria.Maquina.Descripcion;
            TextoOperario = Auditoria.Operario.ApellidoYNombre;
            TextoSupervisor = Auditoria.Supervisor.ApellidoYNombre;


            var responseHttpDetallesAuditoria = await repositorio.Get<List<DetalleAuditoria>>($"api/DetallesAuditoria/{AuditoriaID}");
            detallesAuditoria = responseHttpDetallesAuditoria.Response;
        }
    }
}
